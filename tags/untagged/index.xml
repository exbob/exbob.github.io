<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>untagged on Shaocheng.Li</title>
    <link>https://shaocheng.li/tags/untagged/</link>
    <description>Recent content in untagged on Shaocheng.Li</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 07 May 2022 18:34:49 +0800</lastBuildDate>
    <atom:link href="https://shaocheng.li/tags/untagged/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 进程调度的学习笔记</title>
      <link>https://shaocheng.li/posts/2022/05/07/</link>
      <pubDate>Sat, 07 May 2022 18:34:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2022/05/07/</guid>
      <description>进程调度的概念比较简单。假设在只有单核处理器的系统中，同一时刻只有一个进程可以拥有处理器资源，那么其他的进程只能在就绪队列（runqueue）中等待，等到处理器空闲之后才有机会获取处理器资源并运行。在这种场景下，操作系统就需要从众多的就绪进程中选择一个最合适的进程来运行，这就是进程调度器（scheduler）。进程调度器产生的最大原因是为了提高处理器的利用率。一个进程在运行的过程中有可能需要等待某些资源，比如等待磁盘操作的完成、等待键盘输入、等待物理页面的分配等。如果处理器和进程一起等待，那么明显会浪费处理器资源，所以一个进程在睡眠等待时，调度器可以调度其他进程来运行，这样就提高了处理器的利用率。</description>
    </item>
    <item>
      <title>Linux 内核数据结构-链表</title>
      <link>https://shaocheng.li/posts/2022/04/20/</link>
      <pubDate>Wed, 20 Apr 2022 18:34:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2022/04/20/</guid>
      <description>Linux 内核实现了一个循环双向链表，而且是侵入式链表，核心数据结构定义在 include/linux/types.</description>
    </item>
    <item>
      <title>Linux 内核镜像的类型和区别</title>
      <link>https://shaocheng.li/posts/2022/03/13/</link>
      <pubDate>Sun, 13 Mar 2022 18:34:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2022/03/13/</guid>
      <description>原文：https://ineclabs.com/image-zimage-uimage-vmlinuz-linux-kernel/</description>
    </item>
    <item>
      <title>配置 SSH 密钥登录</title>
      <link>https://shaocheng.li/posts/2022/03/11/</link>
      <pubDate>Fri, 11 Mar 2022 14:34:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2022/03/11/</guid>
      <description>1. 在客户端电脑生成密钥对 #在客户端电脑上执行如下命令，生成一个密钥对：</description>
    </item>
    <item>
      <title>在 iMX8MM 平台调试 AW-CM276MA Wi-Fi 模块</title>
      <link>https://shaocheng.li/posts/2022/02/01/</link>
      <pubDate>Tue, 01 Feb 2022 16:40:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2022/02/01/</guid>
      <description>1. 概述 #硬件平台使用 iMX8MM 参考开发板，带有 M.</description>
    </item>
    <item>
      <title>Linux 下使用 ioctl 接口访问指定网卡</title>
      <link>https://shaocheng.li/posts/2021/10/26/</link>
      <pubDate>Tue, 26 Oct 2021 20:09:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/10/26/</guid>
      <description>netdevice 是 glibc 提供的访问网卡设备的低级接口，支持标准 ioctl 函数，需要的头文件是：</description>
    </item>
    <item>
      <title>iMX8MM 的 Fuse/OCOPT 学习笔记</title>
      <link>https://shaocheng.li/posts/2021/07/16/</link>
      <pubDate>Fri, 16 Jul 2021 22:22:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/07/16/</guid>
      <description>Fuse 就是熔丝位，是一种只能写入一次的寄存器，写入后不可更改，所以写入操作也叫做烧毁（burned）。iMX8MM 的 Fuse 由 on-chip eFuse OTP 控制读写，简称 OCOPT ，结构框图如下：</description>
    </item>
    <item>
      <title>iMX8MM 从 eMMC 启动系统和烧写的笔记</title>
      <link>https://shaocheng.li/posts/2021/07/15/</link>
      <pubDate>Thu, 15 Jul 2021 22:32:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/07/15/</guid>
      <description>1. iMX8MM 的启动流程 # iMX8MM 系统启动的详细流程可以参考 IMX8MMRM.</description>
    </item>
    <item>
      <title>使用 VSCode 绘制数字电路时序图</title>
      <link>https://shaocheng.li/posts/2021/07/03/</link>
      <pubDate>Sat, 03 Jul 2021 18:32:49 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/07/03/</guid>
      <description>在 VSCode 中安装 Waveform Render 插件：</description>
    </item>
    <item>
      <title>如何修改 ARM Linux 系统的启动画面</title>
      <link>https://shaocheng.li/posts/2021/05/07/</link>
      <pubDate>Fri, 07 May 2021 20:49:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/05/07/</guid>
      <description>以 NXP 的 iMX Yocto 4.</description>
    </item>
    <item>
      <title>Linux 系统的 SPI 设备编程</title>
      <link>https://shaocheng.li/posts/2021/04/10/</link>
      <pubDate>Sat, 10 Apr 2021 21:19:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/04/10/</guid>
      <description>SPI 通信协议 #SPI 的全称是 Serial Peripheral Interface，是一个带时钟同步的全双工串行链接，使用主/从结构，用于连接微控制器和传感器、存储器和外设。常见的连接结构如下：</description>
    </item>
    <item>
      <title>Systemd 中实现自动登录和程序自启动</title>
      <link>https://shaocheng.li/posts/2021/03/06/</link>
      <pubDate>Sat, 06 Mar 2021 21:19:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2021/03/06/</guid>
      <description>以 NXP 的 Yocto Linux 4.</description>
    </item>
    <item>
      <title>在 i.MX 6ULL 上学习 Yocto</title>
      <link>https://shaocheng.li/posts/2020/12/12/</link>
      <pubDate>Sat, 12 Dec 2020 18:40:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/12/12/</guid>
      <description>1. 概述 #NXP 为官方评估板 i.</description>
    </item>
    <item>
      <title>使用 Docker 学习 Redis</title>
      <link>https://shaocheng.li/posts/2020/09/01/</link>
      <pubDate>Tue, 01 Sep 2020 09:53:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/09/01/</guid>
      <description># 1.</description>
    </item>
    <item>
      <title>epoll 学习笔记</title>
      <link>https://shaocheng.li/posts/2020/08/30/</link>
      <pubDate>Sun, 30 Aug 2020 11:53:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/08/30/</guid>
      <description>1. 工作原理 #epoll 是 Linux 独有的 I/O 多路复用机制，核心概念就是 epoll 实例，它是一个内核里的数据结构，从用户角度来看它可以简单的看做包含了两个队列：</description>
    </item>
    <item>
      <title>uthash 学习笔记</title>
      <link>https://shaocheng.li/posts/2020/08/29/</link>
      <pubDate>Sat, 29 Aug 2020 11:23:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/08/29/</guid>
      <description>uthash 是一个 C 语言的哈希表函数库，支持哈希表的各种操作，包括添加，删除，查找，排序等。你可以在 github 上下载到它的源码：</description>
    </item>
    <item>
      <title>libubox 学习笔记</title>
      <link>https://shaocheng.li/posts/2020/07/16/</link>
      <pubDate>Thu, 16 Jul 2020 21:23:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/07/16/</guid>
      <description>编译安装 #首先要安装一些依赖的软件：</description>
    </item>
    <item>
      <title>CMake 学习笔记</title>
      <link>https://shaocheng.li/posts/2020/06/29/</link>
      <pubDate>Mon, 29 Jun 2020 22:25:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/06/29/</guid>
      <description>本教程提供了一个渐进式的指导，参考的是官方教程 CMake Tutorial ，然后加入学习过程的笔记。涵盖了使用 CMake 构建一个工程时经常遇到的问题 。通过一个示例项目，展示各种功能是如何一起工作的，这对理解 CMake 非常有用。</description>
    </item>
    <item>
      <title>tcpdump 使用笔记</title>
      <link>https://shaocheng.li/posts/2020/04/12/</link>
      <pubDate>Sun, 12 Apr 2020 22:25:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/04/12/</guid>
      <description>tcpdump 是一个帮助用户捕获、筛选和解析 TCP/IP 协议数据包的命令行工具。</description>
    </item>
    <item>
      <title>Markdown Syntax Guide</title>
      <link>https://shaocheng.li/posts/2020/01/15/</link>
      <pubDate>Wed, 15 Jan 2020 14:31:11 +0800</pubDate>
      <guid>https://shaocheng.li/posts/2020/01/15/</guid>
      <description>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.</description>
    </item>
  </channel>
</rss>
